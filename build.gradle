plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
//    id 'io.github.juuxel.loom-quiltflower' version '1.8.+' // For loom 0.8-0.9, 0.11+
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven { url 'https://dl.cloudsmith.io/public/azuredoom-mods/azurelib/maven/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://api.modrinth.com/maven' }
    maven {
        name 'Quilt'
        url 'https://maven.quiltmc.org/repository/release'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
//    mappings "org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.quilt_mappings}:intermediary-v2"
    // modImplementation "org.quiltmc:quilt-loader:${project.quilt_loader_version}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // Quilt API
//    modImplementation "org.quiltmc:qsl:${project.qsl_version}+${project.minecraft_version}"
//    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${project.quilted_fabric_api_version}-${project.minecraft_version}"

    modImplementation "maven.modrinth:origins:OdNHB7Bh"
    modImplementation "maven.modrinth:azurelib:D0bLIbTK"
    modImplementation "maven.modrinth:cardinal-components-api:HykM2Qyv"
    modImplementation(files("libs/Apoli-1.20.1-2.9.0.jar"))
    modCompileOnly "maven.modrinth:iris:URWeWMAt"
    modCompileOnly "maven.modrinth:extra-origins:spXxXXgx"
    modCompileOnly "maven.modrinth:origins-classes:EnGfmh9y"
    modCompileOnly(files(
            "libs/cardinal-components-base-5.2.1.jar",
            "libs/cardinal-components-block-5.2.1.jar",
            "libs/cardinal-components-chunk-5.2.1.jar",
            "libs/cardinal-components-entity-5.2.1.jar",
            "libs/cardinal-components-item-5.2.1.jar",
            "libs/cardinal-components-level-5.2.1.jar",
            "libs/cardinal-components-scoreboard-5.2.1.jar",
            "libs/cardinal-components-world-5.2.1.jar",
            "libs/calio-v1.11.0.jar",
            "libs/mixinextras-fabric-0.2.0-beta.8.jar"
    ))
    annotationProcessor(files("libs/mixinextras-fabric-0.2.0-beta.8.jar"))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
